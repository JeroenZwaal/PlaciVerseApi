using Microsoft.AspNetCore.Mvc;
using Moq;
using PlaciVerseApi.Controllers;
using PlaciVerseApi.Models;
using PlaciVerseApi.Repositories;

namespace PlaciVerseTests
{
    [TestClass]
    public sealed class EnvironmentsControllerTests
    {
        /// <summary>
        /// Test to add an environment to a user with no environments yet.
        /// </summary>
        [TestMethod]
        public async Task Add_AddEnvironmentToUserWithNoEnvironments_ReturnsCreatedEnvironment()
        {
            // ARRANGE

            var userId = "user123"; // Fake userId
            var newEnvironment = GenerateRandomEnvironment("New Environment");
            var existingUserEnvironments = new List<Environment2D>(); // No environments exist for the user yet

            // Mock de repositories
            var environmentRepository = new Mock<IEnvironmentRepository>();
            var userRepository = new Mock<IUserRepository>();

            // Setup mock methods
            userRepository.Setup(x => x.GetCurrentUserId()).Returns(userId);
            environmentRepository.Setup(x => x.GetEnvironmentByUserId(userId)).ReturnsAsync(existingUserEnvironments);

            // Maak een mock response van CreateEnvironment
            var createdEnvironment = new Environment2D
            {
                EnvironmentId = 123, // Simuleer dat een ID wordt teruggegeven
                Name = newEnvironment.Name,
                MaxLenght = newEnvironment.MaxLenght,
                MaxHeight = newEnvironment.MaxHeight
            };

            environmentRepository.Setup(x => x.CreateEnvironment(It.IsAny<Environment2D>(), userId))
                .ReturnsAsync(createdEnvironment);

            // Maak de controller
            var environmentController = new EnvironmentController(environmentRepository.Object, userRepository.Object);

            // ACT
            var response = await environmentController.CreateEnvironment(newEnvironment);

            // ASSERT

            // Check of de response van het juiste type is
            Assert.IsInstanceOfType(response, typeof(CreatedAtActionResult));

            // Verkrijg de gemaakte environment uit de response
            var createdEnvironmentFromResponse = (response as CreatedAtActionResult)?.Value as Environment2D;

            // Assert dat de gemaakte environment overeenkomt met de nieuwe environment
            Assert.IsNotNull(createdEnvironmentFromResponse);
            Assert.AreEqual(newEnvironment.Name, createdEnvironmentFromResponse.Name);
            Assert.AreEqual(newEnvironment.MaxLenght, createdEnvironmentFromResponse.MaxLenght);
            Assert.AreEqual(newEnvironment.MaxHeight, createdEnvironmentFromResponse.MaxHeight);
            Assert.AreEqual(123, createdEnvironmentFromResponse.EnvironmentId); // Assert dat het gegenereerde ID overeenkomt
        }


        /// <summary>
        /// Helper method to generate a random environment.
        /// </summary>
        private Environment2D GenerateRandomEnvironment(string name)
        {
            return new Environment2D
            {
                EnvironmentId = 0, // Assuming the ID is generated by the database
                MaxHeight = 50,
                MaxLenght = 50,
                Name = name,
            };
        }

        [TestMethod]
        public async Task CreateWorld_WithDuplicateName_ShouldReturnBadRequest()
        {
            // ARRANGE
            var userId = "user123";
            var existingEnvironment = new Environment2D { Name = "Duplicate World", MaxLenght = 50, MaxHeight = 50 };

            var newEnvironment = new Environment2D { Name = "Duplicate World", MaxLenght = 50, MaxHeight = 50 }; // Same name as the existing one

            var environmentRepository = new Mock<IEnvironmentRepository>();
            var userRepository = new Mock<IUserRepository>();

            // Simulate a logged-in user
            userRepository.Setup(repo => repo.GetCurrentUserId()).Returns(userId);

            // Simulate that the user already has a world with the name "Duplicate World"
            environmentRepository.Setup(repo => repo.GetEnvironmentByUserId(userId))
                .ReturnsAsync(new List<Environment2D> { existingEnvironment });

            var environmentController = new EnvironmentController(environmentRepository.Object, userRepository.Object);

            // Act - try to create a new environment with the same name
            var result = await environmentController.CreateEnvironment(newEnvironment);

            // ASSERT - check that the operation returns a BadRequest with a proper error message
            Assert.IsInstanceOfType(result, typeof(BadRequestObjectResult));
            var badRequestResult = result as BadRequestObjectResult;
            Assert.AreEqual("Environment name already exists", badRequestResult.Value);
        }

        [TestMethod]
        public async Task Delete_ExistingEnvironment_ReturnsOk()
        {
            // ARRANGE
            var userId = Guid.NewGuid().ToString();
            var environmentId = 1;  // Bijvoorbeeld het id van de omgeving die je wilt verwijderen

            var environmentRepository = new Mock<IEnvironmentRepository>();
            var userRepository = new Mock<IUserRepository>();

            // Stel de mock in om een gebruiker te simuleren
            userRepository.Setup(x => x.GetCurrentUserId()).Returns(userId);

            // Stel de mock in voor het verwijderen van de omgeving
            environmentRepository.Setup(x => x.DeleteEnvironment(environmentId, userId)).ReturnsAsync(true);

            var environmentController = new EnvironmentController(environmentRepository.Object, userRepository.Object);

            // ACT
            var result = await environmentController.DeleteEnvironment(environmentId);

            // ASSERT
            Assert.IsInstanceOfType(result, typeof(OkObjectResult));
        }

        [TestMethod]
        public async Task Delete_Environment_UserNotLoggedIn_ReturnsUnauthorized()
        {
            // ARRANGE
            var environmentId = 1;
            var environmentRepository = new Mock<IEnvironmentRepository>();
            var userRepository = new Mock<IUserRepository>();

            // Stel de mock in om geen gebruiker terug te geven
            userRepository.Setup(x => x.GetCurrentUserId()).Returns((string)null);

            var environmentController = new EnvironmentController(environmentRepository.Object, userRepository.Object);

            // ACT
            var result = await environmentController.DeleteEnvironment(environmentId);

            // ASSERT
            Assert.IsInstanceOfType(result, typeof(UnauthorizedObjectResult));
            var unauthorizedResult = result as UnauthorizedObjectResult;
            Assert.AreEqual("User not Authorized", unauthorizedResult?.Value);
        }

        [TestMethod]
        public async Task Delete_Environment_NotFound_ReturnsBadRequest()
        {
            // ARRANGE
            var userId = Guid.NewGuid().ToString();
            var environmentId = 1;

            var environmentRepository = new Mock<IEnvironmentRepository>();
            var userRepository = new Mock<IUserRepository>();

            // Stel de mock in om een gebruiker terug te geven
            userRepository.Setup(x => x.GetCurrentUserId()).Returns(userId);

            // Stel de mock in voor het verwijderen van de omgeving, maar retourneer false (omdat de omgeving niet gevonden is)
            environmentRepository.Setup(x => x.DeleteEnvironment(environmentId, userId)).ReturnsAsync(false);

            var environmentController = new EnvironmentController(environmentRepository.Object, userRepository.Object);

            // ACT
            var result = await environmentController.DeleteEnvironment(environmentId);

            // ASSERT
            Assert.IsInstanceOfType(result, typeof(BadRequestObjectResult));
            var badRequestResult = result as BadRequestObjectResult;
            Assert.AreEqual("Environment not deleted", badRequestResult?.Value);
        }
    }
}

